# This references a standard debian container from the
# Docker Hub https://registry.hub.docker.com/_/debian/
# Read more about containers on our dev center
# http://devcenter.wercker.com/docs/containers/index.html
box: debian
# You can also use services such as databases. Read more on our dev center:
# http://devcenter.wercker.com/docs/services/index.html
# services:
    # - postgres
    # http://devcenter.wercker.com/docs/services/postgresql.html

    # - mongodb
    # http://devcenter.wercker.com/docs/services/mongodb.html

# This is the build pipeline. Pipelines are the core of wercker
# Read more about pipelines on our dev center
# http://devcenter.wercker.com/docs/pipelines/index.html
build:
    # Steps make up the actions in your pipeline
    # Read more about steps on our dev center:
    # http://devcenter.wercker.com/docs/steps/index.html
  steps:
    - script:
        name: echo
        code: |
          echo "hello world!"        
        
deploy:
  steps:
   - mktemp:
      envvar: PRIVATEKEY_PATH
   - create-file:
      name: write key
      filename: $PRIVATEKEY_PATH
      content: $DIGITALOCEAN_PRIVATE
      overwrite: true
      hide-from-log: true
   - script:
      name: install ssh
      code: |
        apt-get update && apt-get install ssh -y
        pwd
        ls -la
   - script:
        name: git fetch
        code: >
          ssh -i $PRIVATEKEY_PATH -l root -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no $HOSTNAME "cd $GIT && git fetch" 
   - script:
        name: git checkout
        code: >
          if [ $TYPE == "FULL"]; then
          ssh -i $PRIVATEKEY_PATH -l root -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no $HOSTNAME "cd $GIT && GIT_WORK_TREE=$WORK_TREE git checkout -f";
          else
          ssh -i $PRIVATEKEY_PATH -l root -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no $HOSTNAME "cd $GIT && GIT_WORK_TREE=$WORK_TREE git checkout -f HEAD $TO";
          ssh -i $PRIVATEKEY_PATH -l root -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no $HOSTNAME "cd $GIT && GIT_WORK_TREE=$WORK_TREE git reset HEAD $TO";
          ssh -i $PRIVATEKEY_PATH -l root -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no $HOSTNAME "cd $GIT && GIT_WORK_TREE=$WORK_TREE git clean -fd";
          fi;
          
    